-----------------------------------
-- RAYFIELD SETUP (Shared for All)
-----------------------------------
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "moma hub - scriptblox = moma1133222 follow me please",
    Icon = 0,
    LoadingTitle = "moma hub loading",
    LoadingSubtitle = "by moma1133222",
    Theme = "Default",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,
    ConfigurationSaving = {
       Enabled = false,
       FolderName = nil,
       FileName = "moma hub"
    },
    Discord = {
       Enabled = true,
       Invite = "https://discord.gg/S2KXT2GsEw",
       RememberJoins = true
    },
    KeySystem = false,
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided",
       FileName = "Key",
       SaveKey = true,
       GrabKeyFromSite = false,
       Key = {"Hello"}
    }
})

-----------------------------------
-- BLACKLIST CHECK (Kicks Player)
-----------------------------------
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local blacklist = {
    5080636767,  -- Existing blacklisted UserId
    1273962566,  -- Newly added UserId
    7997266952   -- Newly added UserId
}
local customMessage = "You are blacklisted from using this script. Appeal by adding my discord: moma1133222"

local function isBlacklisted(id)
    for _, bannedId in ipairs(blacklist) do
        if bannedId == id then
            return true
        end
    end
    return false
end

if isBlacklisted(localPlayer.UserId) then
    localPlayer:Kick(customMessage)
    return
end


---------------------------------------------------
-- EXECUTION LOGGER & PLAYER STATS WEBHOOK
---------------------------------------------------
local HttpService = game:GetService("HttpService")
local webhookURL = "https://discordapp.com/api/webhooks/1341263812862541855/MHLtrVgcDUUnq5V5mkBvakJJrpfXwC9uk204K6ZnHDqIEKRpUQ0WtoWPIo5TOjNNj9QC"

local counterFile = "execution_count_" .. localPlayer.UserId .. ".txt"
local executionCount = 0

pcall(function()
    if isfile and isfile(counterFile) then
        executionCount = tonumber(readfile(counterFile)) or 0
    end
    executionCount = executionCount + 1
    if writefile then
        writefile(counterFile, tostring(executionCount))
    end
end)

local function getTimestamp()
    return os.date("!%Y-%m-%dT%H:%M:%SZ")
end

local function sendStatsWebhook()
    if webhookURL == "" then
        return
    end

    local auraInvCap, donation, highestRNG, money, playTime, rolls, autoCraftVal = "N/A", "N/A", "N/A", "N/A", "N/A", "N/A", "N/A"

    pcall(function()
        local visibleData = localPlayer:FindFirstChild("VisibleData")
        if visibleData then
            if visibleData:FindFirstChild("AuraInventoryCapacity") then
                local val = tonumber(visibleData.AuraInventoryCapacity.Value)
                auraInvCap = val and tostring(val) or "N/A"
            end
            if visibleData:FindFirstChild("Donation") then
                local val = tonumber(visibleData.Donation.Value)
                donation = val and tostring(val) or "N/A"
            end
            if visibleData:FindFirstChild("HighestRNG") then
                local val = tonumber(visibleData.HighestRNG.Value)
                highestRNG = val and tostring(val) or "N/A"
            end
            if visibleData:FindFirstChild("Money") then
                local val = tonumber(visibleData.Money.Value)
                money = val and tostring(val) or "N/A"
            end
            if visibleData:FindFirstChild("PlayTime") then
                local seconds = tonumber(visibleData.PlayTime.Value)
                if seconds and seconds > 0 then
                    playTime = string.format("%.2f hours", seconds / 3600)
                else
                    playTime = "N/A"
                end
            end
        end

        local leaderstats = localPlayer:FindFirstChild("leaderstats")
        if leaderstats and leaderstats:FindFirstChild("Rolls") then
            local val = tonumber(leaderstats.Rolls.Value)
            rolls = val and tostring(val) or "N/A"
        end

        local autoCraftObj = localPlayer:FindFirstChild("AutoCraft")
        if autoCraftObj and autoCraftObj:IsA("ValueBase") then
            autoCraftVal = tostring(autoCraftObj.Value)
        end
    end)

    local data = {
        username = "moma hub webhooks",
        avatar_url = "https://cdn.discordapp.com/avatars/1335683455471718412/a_dd829b3d91ebd074581b2719dd020ba4.gif?size=1024",
        embeds = {
            {
                title = "Player Stats & Execution Log",
                description = string.format("Stats for **%s**", localPlayer.Name),
                color = 3447003,
                fields = {
                    { name = "Execution Count", value = tostring(executionCount), inline = true },
                    { name = "Aura Inv. Capacity", value = auraInvCap, inline = true },
                    { name = "Donation", value = donation, inline = true },
                    { name = "Highest RNG", value = highestRNG, inline = true },
                    { name = "Money", value = money, inline = true },
                    { name = "PlayTime", value = playTime, inline = true },
                    { name = "Rolls", value = rolls, inline = true },
                    { name = "AutoCraft", value = autoCraftVal, inline = true },
                },
                footer = {
                    text = "Powered by moma hub"
                },
                timestamp = getTimestamp()
            }
        }
    }

    local jsonData = HttpService:JSONEncode(data)
    local requestFunc = (syn and syn.request) or (http and http.request) or request
    if requestFunc then
        pcall(function()
            requestFunc({
                Url = webhookURL,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = jsonData
            })
        end)
    end
end

sendStatsWebhook()

---------------------------------------------------
-- CONFIGURATION (for Webhook & Options)
---------------------------------------------------
local webhookURL_Config = ""
local selectedPotions = {}
local selectedBiomes = {}
local usePotionsOnlyAtGlitch = false
local displayStatsActive = false

-------------------------------
-- UPDATE LOG TAB
-------------------------------
local TabUpdate = Window:CreateTab("Update Log", 4483362458)
local SectionUpdate = TabUpdate:CreateSection("")

local UpdateParagraph = TabUpdate:CreateParagraph({
    Title = "Update Log",
    Content = "What's New?\n" ..
              "• Added webhook saving (only for webhook for now)\n" ..
              "• Join my new server for suggestions, questions, or bugs! https://discord.gg/S2KXT2GsEw\n"
})

local SectionUpdate2 = TabUpdate:CreateSection("")

local ToDoParagraph = TabUpdate:CreateParagraph({
    Title = "To Do:",
    Content = "• Aura webhook\n" ..
              "• Fun tab\n" ..
              "• More improvements and features...\n" ..
              "• Additional ideas - DM me on Discord: moma1133222"
})

-------------------------------
-- MAIN (AutoFarm/Collect/Obby) TAB
-------------------------------
local TabMain = Window:CreateTab("Main", 4483362458)
local SectionMain = TabMain:CreateSection("Auto farm")
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
repeat task.wait() until character:FindFirstChild("HumanoidRootPart")
local rootPart = character:FindFirstChild("HumanoidRootPart")
local TweenService = game:GetService("TweenService")
local humanoid = character:FindFirstChildOfClass("Humanoid")

------------------------------------------------
-- Auto Collect Potion/Gold (Teleport)
------------------------------------------------
local autoCollectInstant = false
local ToggleCollectInstant = TabMain:CreateToggle({
   Name = "Auto Collect Potion/Gold (Teleport)",
   CurrentValue = false,
   Flag = "AutoCollectInstant",
   Callback = function(Value)
       autoCollectInstant = Value
       if autoCollectInstant then
           spawn(function()
               while autoCollectInstant do
                   local objectsFolder = workspace:FindFirstChild("NaturalIemSpawn")
                   if objectsFolder then
                       local items = objectsFolder:FindFirstChild("Objects")
                       if items and #items:GetChildren() > 0 then
                           local collectible = items:GetChildren()[1]
                           if collectible then
                               rootPart.CFrame = collectible.CFrame + Vector3.new(0, 3, 0)
                               wait(0.5)
                               local prompt = collectible:FindFirstChildWhichIsA("ProximityPrompt", true)
                               if prompt then
                                   fireproximityprompt(prompt)
                               end
                           end
                       end
                   end
                   wait(1)
               end
           end)
       end
   end,
})

------------------------------------------------
-- Auto Collect Potion/Gold (Tween)
------------------------------------------------
local autoCollectTween = false
local ToggleCollectTween = TabMain:CreateToggle({
    Name = "Auto Collect Potion/Gold (Tween)",
    CurrentValue = false,
    Flag = "AutoCollectTween",
    Callback = function(Value)
        autoCollectTween = Value
        if autoCollectTween then
            spawn(function()
                while autoCollectTween do
                    local objectsFolder = workspace:FindFirstChild("NaturalIemSpawn")
                    if objectsFolder then
                        local items = objectsFolder:FindFirstChild("Objects")
                        if items and #items:GetChildren() > 0 then
                            local collectible = items:GetChildren()[1]
                            if collectible and collectible:IsA("BasePart") then
                                for _, part in ipairs(character:GetDescendants()) do
                                    if part:IsA("BasePart") then
                                        part.CanCollide = false
                                    end
                                end
                                local targetCFrame = collectible.CFrame + Vector3.new(0, 3, 0)
                                local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                                local tween = TweenService:Create(rootPart, tweenInfo, {CFrame = targetCFrame})
                                tween:Play()
                                tween.Completed:Wait()
                                local prompt = collectible:FindFirstChildWhichIsA("ProximityPrompt", true)
                                if prompt then
                                    fireproximityprompt(prompt)
                                end
                            end
                        end
                    end
                    wait(1)
                end
            end)
        end
    end,
})

------------------------------------------------
-- Auto Obby Luck (Instant Teleport)
------------------------------------------------
local obbyLuck = workspace:FindFirstChild("Obby Luck Platform")
local canTeleport = false
local teleportCooldown = false
local ToggleObby = TabMain:CreateToggle({
    Name = "Auto Obby Luck",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        canTeleport = Value
        if not canTeleport then
            teleportCooldown = false
        end
    end,
})
local function teleportToBox()
    if canTeleport and not teleportCooldown and obbyLuck then
        local model = obbyLuck:FindFirstChild("Model")
        if model then
            local box = model:FindFirstChild("Box")
            if box and box:IsA("BasePart") then
                local prompt = box:FindFirstChild("ProximityPrompt")
                if prompt then
                    rootPart.CFrame = box.CFrame + Vector3.new(0, 3, 0)
                    task.wait(0.5)
                    fireproximityprompt(prompt)
                    teleportCooldown = true
                    task.wait(60)
                    teleportCooldown = false
                end
            end
        end
    end
end
game:GetService("RunService").Stepped:Connect(function()
    if canTeleport and not teleportCooldown then
        teleportToBox()
    end
end)
local RemoveSeatsButton = TabMain:CreateButton({
    Name = "Remove Seats - needed for auto collect",
    Callback = function()
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj:IsA("Seat") then
                obj:Destroy()
            end
        end
    end,
})

------------------------------------------------
-- AutoFarm Boosts (Instant Teleport)
------------------------------------------------
local autoFarm = false
local ToggleAutoFarm = TabMain:CreateToggle({
    Name = "AutoFarm Boosts - op af for boosts",
    CurrentValue = false,
    Flag = "AutoFarmToggle",
    Callback = function(Value)
        autoFarm = Value
    end,
})
task.spawn(function()
    while true do
        if autoFarm then
            local obbyLuck = workspace:FindFirstChild("Obby Luck Platform")
            if obbyLuck then
                local model = obbyLuck:FindFirstChild("Model")
                if model then
                    local box = model:FindFirstChild("Box")
                    if box and box:IsA("BasePart") then
                        local prompt = box:FindFirstChild("ProximityPrompt")
                        if prompt then
                            rootPart.CFrame = box.CFrame + Vector3.new(0, 3, 0)
                            task.wait(0.1)
                            for i = 1, 10 do
                                fireproximityprompt(prompt)
                                task.wait(0.01)
                            end
                        end
                    end
                end
            end
        end
        task.wait(0.5)
    end
end)

-----------------------------------
-- STOP AUTO FARM IF OTHERS JOIN TOGGLE
-----------------------------------
local stopAutoFarmIfOthers = false
local autoFarmBackup = nil

local ToggleStopAutoFarmIfOthers = TabMain:CreateToggle({
    Name = "Stop Auto Farm if Others Join (will not resume when players leave, fix soon)",
    CurrentValue = false,
    Flag = "StopAutoFarmIfOthers",
    Callback = function(Value)
        stopAutoFarmIfOthers = Value
    end,
})

local function resetCharacter()
    local char = localPlayer.Character
    if char then
        local humanoid = char:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.Health = 0
        end
    end
end

local function disableAutoFarmAndReset()
    if not autoFarmBackup then
        autoFarmBackup = {
            collectInstant = ToggleCollectInstant.CurrentValue,
            collectTween   = ToggleCollectTween.CurrentValue,
            canTeleport    = ToggleObby.CurrentValue,
            autoFarm       = ToggleAutoFarm.CurrentValue,
        }
        if ToggleCollectInstant.CurrentValue then
            ToggleCollectInstant.Callback(false)
        end
        if ToggleCollectTween.CurrentValue then
            ToggleCollectTween.Callback(false)
        end
        if ToggleObby.CurrentValue then
            ToggleObby.Callback(false)
        end
        if ToggleAutoFarm.CurrentValue then
            ToggleAutoFarm.Callback(false)
        end
        resetCharacter()
    end
end

local function restoreAutoFarm()
    if autoFarmBackup then
        if autoFarmBackup.collectInstant then
            ToggleCollectInstant.Callback(true)
        end
        if autoFarmBackup.collectTween then
            ToggleCollectTween.Callback(true)
        end
        if autoFarmBackup.canTeleport then
            ToggleObby.Callback(true)
        end
        if autoFarmBackup.autoFarm then
            ToggleAutoFarm.Callback(true)
        end
        autoFarmBackup = nil
    end
end

Players.PlayerAdded:Connect(function(newPlayer)
    if stopAutoFarmIfOthers then
        local playerList = Players:GetPlayers()
        if #playerList > 1 and not autoFarmBackup then
            disableAutoFarmAndReset()
        end
    end
end)

Players.PlayerRemoving:Connect(function(leavingPlayer)
    if stopAutoFarmIfOthers then
        task.wait(1)
        local playerList = Players:GetPlayers()
        if #playerList == 1 and autoFarmBackup then
            restoreAutoFarm()
        end
    end
end)

local Tab = Window:CreateTab("Merchant Auto-Buy", 4483362458)
local Section = Tab:CreateSection("Merchant")

------------------------------------
-- GLOBALS & DEFAULTS
------------------------------------
_G.PurchaseAmount = 0 -- fallback default
_G.AutoBuyEnabled = false

------------------------------------
-- TEXTBOX FOR PURCHASE AMOUNT
------------------------------------
Tab:CreateInput({
    Name = "Purchase Amount",
    PlaceholderText = "0",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        local num = tonumber(text)
        if num then
            _G.PurchaseAmount = num
        else
            _G.PurchaseAmount = 10
        end
    end
})

------------------------------------
-- TOGGLE FOR AUTO-BUY ENABLE
------------------------------------
Tab:CreateToggle({
    Name = "Enable Auto-Buy",
    CurrentValue = false,
    Callback = function(value)
        _G.AutoBuyEnabled = value
    end
})

------------------------------------
-- BUYING FUNCTION (Remotes)
-- Using your specified arguments:
--  Left slot: 2
--  Next to left: 5
--  Middle: 1
--  Next to right: 3
--  Right slot: 4
------------------------------------
local function buyItemById(itemId)
    local merchantEvent = game:GetService("ReplicatedStorage")
        :WaitForChild("GetRemoteEvents")
        :WaitForChild("Merchants")
        :WaitForChild("BuyMerchantItem")
    pcall(function()
        merchantEvent:InvokeServer(itemId)
    end)
end

------------------------------------
-- AUTO-BUY LOOP
-- Checks the merchant every 2 seconds;
-- if active and auto-buy is enabled,
-- buys each slot _G.PurchaseAmount times,
-- then waits for merchant to disappear.
------------------------------------
spawn(function()
    while task.wait(2) do
        local success, stockData = pcall(function()
            return game:GetService("ReplicatedStorage")
                :WaitForChild("GetRemoteEvents")
                :WaitForChild("Merchants")
                :WaitForChild("GetCurrentStock")
                :InvokeServer()
        end)

        -- Only proceed if auto-buy is enabled
        if _G.AutoBuyEnabled and success and stockData and next(stockData) then
            -- Merchant is active
            for i = 1, _G.PurchaseAmount do
                buyItemById(2) -- Left slot
                task.wait(0.5)
                buyItemById(5) -- Next to left
                task.wait(0.5)
                buyItemById(1) -- Middle
                task.wait(0.5)
                buyItemById(3) -- Next to right
                task.wait(0.5)
                buyItemById(4) -- Right slot
                task.wait(0.5)
            end

            -- Now wait until the merchant is gone
            repeat
                task.wait(2)
                local s, d = pcall(function()
                    return game:GetService("ReplicatedStorage")
                        :WaitForChild("GetRemoteEvents")
                        :WaitForChild("Merchants")
                        :WaitForChild("GetCurrentStock")
                        :InvokeServer()
                end)
            until not (s and d and next(d)) or not _G.AutoBuyEnabled
        end
    end
end)


local infoParagraph = Tab:CreateParagraph({
    Title = "Auto-Buy Update",
    Content = "Sorry that I had to remove the old auto-buy—it was very glitchy. I'm still working on making it more reliable, but for now you can use this new version which auto-buys all the items for sale so you won't miss out on Stardust Potion I or II if you set it to 5. If you're a good scripter and wouldn't mind helping me out by adding my Discord (moma1133222), I'd really appreciate it since it's been very hard doing this alone."
})



-----------------------------------
-- GUIS
-----------------------------------

local TabGUIS = Window:CreateTab("GUI", 4483362458)

local ButtonMerchantBuy = TabGUIS:CreateButton({
    Name = "Enable Merchant Buy Screen(only works if merchant spawned)",
    Callback = function()
        local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
        local merchantUI = playerGui:FindFirstChild("VioletBuyGUI")
        if merchantUI then
            merchantUI.Enabled = true
        else
            warn("VioletBuyGUI not found. It may not have spawned yet.")
        end
    end,
})

local ButtonPotionCrafting = TabGUIS:CreateButton({
    Name = "Enable Potion Crafting",
    Callback = function()
        local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
        local potionUI = playerGui:FindFirstChild("CraftingWitch")
        if potionUI then
            potionUI.Enabled = true
        else
            warn("CraftingWitch not found.")
        end
    end,
})

local ButtonGloveCrafting = TabGUIS:CreateButton({
    Name = "Enable Glove Crafting",
    Callback = function()
        local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
        local gloveUI = playerGui:FindFirstChild("Crafting")
        if gloveUI then
            gloveUI.Enabled = true
        else
            warn("Crafting not found.")
        end
    end,
})


-----------------------------------
-- TESTING TAB (Multi-Craft UI)
-----------------------------------
local TabTesting = Window:CreateTab("Multi Crafting", 4483362458)

local HowToUseParagraph = TabTesting:CreateParagraph({
    Title = "How to Use",
    Content = [[
1: Select what potion you want to multi craft.
2: After, make sure you choose the right auras (I recommend only using high tiers, no low tiers).
3: Go to settings.
4: Aura Filter.
5: Make sure the auras you need for the potions are set as "keep".
And you're done!
]]
})

-- (Reuse our global player & potionsFolder from above)
local potionsFolder = localPlayer:WaitForChild("Crafting"):WaitForChild("Potions")
local potionNames = {}
for _, potionFolder in ipairs(potionsFolder:GetChildren()) do
    table.insert(potionNames, potionFolder.Name)
end

-- Reset global selections for multi-craft
_G.SelectedPotions = {}
_G.SelectedAuras = {}
local potionsUI = {}    -- Table for dynamic UI elements
local multiCraftToggle   -- Reference for the toggle UI element
local multiCraftActive = false

-----------------------------------
-- REMOTE FUNCTION TO ADD AURA (Multi-Craft)
-----------------------------------
local function addAuraItemCraft(potionName, auraName)
    local args = {
        [1] = "Potions",
        [2] = potionName,
        [3] = "Aura",
        [4] = auraName,
        [5] = 1
    }
    local addItemRemote = game:GetService("ReplicatedStorage")
        :WaitForChild("GetRemoteEvents")
        :WaitForChild("Crafting")
        :WaitForChild("AddItem")
    pcall(function()
        addItemRemote:InvokeServer(unpack(args))
    end)
end

-----------------------------------
-- FUNCTION: Create Multi-Craft UI (10 slots by default)
-----------------------------------
local function createPotionsUI(count)
    -- Create the Multi-Craft toggle at the top
    multiCraftToggle = TabTesting:CreateToggle({
        Name = "Start Multi-Craft",
        CurrentValue = false,
        Callback = function(value)
            multiCraftActive = value
            if multiCraftActive then
                spawn(function()
                    while multiCraftActive do
                        for i = 1, count do
                            local chosenPotion = _G.SelectedPotions[i]
                            local chosenAuras  = _G.SelectedAuras[i] or {}
                            if chosenPotion and #chosenAuras > 0 then
                                for _, auraName in ipairs(chosenAuras) do
                                    addAuraItemCraft(chosenPotion, auraName)
                                    task.wait(0.1)
                                end
                            end
                        end
                        task.wait(0.5)
                    end
                end)
            end
        end
    })

    -- Create UI for each potion slot below the toggle
    for i = 1, count do
        local section = TabTesting:CreateSection("Potion #" .. i)
        local potionDropdown = TabTesting:CreateDropdown({
            Name = "Select Potion #" .. i,
            Options = potionNames,
            CurrentOption = {},
            MultipleOptions = false,
            Callback = function(option)
                if not option or #option == 0 then return end
                local chosenPotion = option[1]
                _G.SelectedPotions[i] = chosenPotion

                local potionFolder = potionsFolder:FindFirstChild(chosenPotion)
                if potionFolder then
                    local auraFolder = potionFolder:FindFirstChild("Aura")
                    if auraFolder then
                        local auraNames = {}
                        for _, auraItem in ipairs(auraFolder:GetChildren()) do
                            table.insert(auraNames, auraItem.Name)
                        end
                        if potionsUI[i] and potionsUI[i].aurasDropdown then
                            potionsUI[i].aurasDropdown:Refresh(auraNames, {})
                        end
                    else
                        Rayfield:Notify({
                            Title = "No Aura Folder",
                            Content = "This potion has no Aura folder.",
                            Duration = 5
                        })
                        if potionsUI[i] and potionsUI[i].aurasDropdown then
                            potionsUI[i].aurasDropdown:Refresh({}, {})
                        end
                    end
                else
                    Rayfield:Notify({
                        Title = "Potion Not Found",
                        Content = "Potion folder not found in LocalPlayer.Crafting.Potions",
                        Duration = 5
                    })
                    if potionsUI[i] and potionsUI[i].aurasDropdown then
                        potionsUI[i].aurasDropdown:Refresh({}, {})
                    end
                end
            end
        })
        local aurasDropdown = TabTesting:CreateDropdown({
            Name = "Select Auras (multi) for Potion #" .. i,
            Options = {},
            CurrentOption = {},
            MultipleOptions = true,
            Callback = function(option)
                _G.SelectedAuras[i] = option
            end
        })
        potionsUI[i] = {
            section = section,
            potionDropdown = potionDropdown,
            aurasDropdown = aurasDropdown
        }
    end
end

-----------------------------------
-- CREATE 10 MULTI-CRAFT SLOTS
-----------------------------------
createPotionsUI(10)

------------------------------------
-- FREE STUFF TAB
------------------------------------
local TabFree = Window:CreateTab("FREE STUFF", 4483362458)
local SectionFree = TabFree:CreateSection("FREE STUFF")

-- Define the player variable
local player = game:GetService("Players").LocalPlayer

local function createGamepass(name)
    local gamepassesFolder = player:FindFirstChild("Gamepasses")
    if not gamepassesFolder then
        gamepassesFolder = Instance.new("Folder")
        gamepassesFolder.Name = "Gamepasses"
        gamepassesFolder.Parent = player
    end
    local gamepass = gamepassesFolder:FindFirstChild(name)
    if not gamepass then
        gamepass = Instance.new("BoolValue")
        gamepass.Name = name
        gamepass.Parent = gamepassesFolder
    end
    gamepass.Value = true
end

local ButtonQuickRoll = TabFree:CreateButton({
    Name = "Enable QuickRoll",
    Callback = function()
        createGamepass("QuickRoll")
    end,
})

local ButtonVIP = TabFree:CreateButton({
    Name = "Enable VIP",
    Callback = function()
        createGamepass("VIP")
    end,
})

local ButtonMoney = TabFree:CreateButton({
    Name = "Enable 2x Money",
    Callback = function()
        createGamepass("Money")
    end,
})

-- Dynamically build glove options from ReplicatedStorage.Meta.Gear
local gearFolder = game:GetService("ReplicatedStorage").Meta.Gear
local gloveOptions = {}
for _, gear in ipairs(gearFolder:GetChildren()) do
    table.insert(gloveOptions, gear.Name)
end

local function equipGlove(arm, gloveName)
    local equipmentFolder = player:FindFirstChild("Equipment")
    if equipmentFolder then
        local armSlot = equipmentFolder:FindFirstChild(arm)
        if armSlot then
            armSlot.Value = gloveName
        end
    end
end

local LeftGloveDropdown = TabFree:CreateDropdown({
    Name = "Left Glove",
    Options = gloveOptions,
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "LeftGlove",
    Callback = function(option)
        if option and #option > 0 then
            equipGlove("Left Arm", option[1])
        end
    end,
})

local RightGloveDropdown = TabFree:CreateDropdown({
    Name = "Right Glove",
    Options = gloveOptions,
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "RightGlove",
    Callback = function(option)
        if option and #option > 0 then
            equipGlove("Right Arm", option[1])
        end
    end,
})

